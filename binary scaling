from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np
import tensorflow as tf

features=np.array([
    [140,1],[130,1],[150,0],[170,0],[160,0],[120,1],[180,0],[110,1],[155,0],[135,1],[145,0],[125,1],[175,0],[115,1],[165,0],
    [185,0],[110,1],[190,0],[105,1],[195,0],[108,1],[200,0],[112,1],[158,0],[118,1],[168,0],[122,1],[178,0],[128,1],[188,0]
])

#labels: 0=Orange , 1=Apple
labels=np.array([0,0,1,1,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1])
features=features/np.max(features,axis=0)
X_train,X_test,y_train,y_test=train_test_split(features,labels,test_size=0.3,random_state=42)

#Create tf.data.Dataset objects
train_dataset=tf.data.Dataset.from_tensor_slices((X_train,y_train))
test_dataset=tf.data.Dataset.from_tensor_slices((X_test,y_test))

#Shuffle and batch datasets
train_dataset=train_dataset.shuffle(buffer_size=20).batch(4)
test_dataset=test_dataset.batch(4)

#Define the model
model=tf.keras.Sequential([tf.keras.layers.Dense(8, activation='relu',input_shape=(2,)),tf.keras.layers.Dense(4, activation='relu'),tf.keras.layers.Dense(1, activation="sigmoid")])

#compile the model
model.compile(optimizer="adam",
              loss="binary_crossentropy",
              metrics=['accuracy'])

#train model using tf.data
model.fit(train_dataset, epochs=50, verbose=0)

#evaluate the model
loss , acc= model.evaluate(test_dataset)
print("Test Accuracy :", round(acc*100,2),"%")

#predict on a new sample
new_sample=np.array([[160,0]],dtype=np.float32)
new_sample_scaled=new_sample/np.max(features,axis=0)
prediction=model.predict(new_sample_scaled)
print("prediction for [160,smooth]: ","Apple" if prediction[0][0]>=0.5 else "Orange")
